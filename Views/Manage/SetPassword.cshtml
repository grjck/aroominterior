@model ARoomInterior.Models.SetPasswordViewModel
@{
    ViewBag.Title = Resources.SetPassword.Title;
}

<style>
    .aimgback {
        transition: .5s;
        height: 40px;
        width: 50px;
        margin-top: 0px;
        margin-bottom: 0px;
    }

    .aback:hover .aimgback {
        transition: .5s;
        height: 35px;
        width: 55px;
        margin-top: 2.5px;
        margin-bottom: 2.5px;
    }
</style>
<div class="row">
    <a class="aback" href="/Manage" style=" height: 40px; width: 65px; margin-top: auto; margin-bottom: auto; margin-right: auto; margin-left: 10px; padding-right: 0px; padding-left: 0px; position: absolute">
        <img class="aimgback" src="~/New/media-13-512.png" />
    </a>
    <h2 style="margin-left:60px">@ViewBag.Title.</h2>
</div>
<h4>@Resources.SetPassword.Header</h4>
<hr />

@using (Html.BeginForm("SetPassword", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="alert alert-dismissible alert-success">
        <strong>@Resources.SetPassword.MessageHeader</strong><br />
        @Resources.SetPassword.Message
    </div>
    if (ViewData.ModelState.Keys.Contains(""))
    {
        <div class="alert alert-dismissible alert-primary">
            <button type="button" class="close" data-dismiss="alert">&times;</button>
            @Html.ValidationSummary(true, "")
        </div>
    }

    <div class="form-group has-success has-danger">
        @Html.LabelFor(m => m.NewPassword, new { @class = "form-control-label", style = "margin-left:20px" })
        <div class="col-md-10">
            @if (ViewData.ModelState.Keys.Contains("NewPassword"))
            {
                if (ViewData.ModelState["NewPassword"].Errors.Count == 0)
                {
                    @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control is-valid" })
                }
                else
                {
                    @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control is-invalid" })
                }
                @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "invalid-feedback" })
            }
            else
            {
                @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
            }
        </div>
    </div>
    <div class="form-group has-success has-danger">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "form-control-label", style = "margin-left:20px" })
        <div class="col-md-10">
            @if (ViewData.ModelState.Keys.Contains("ConfirmPassword"))
            {
                if (ViewData.ModelState["ConfirmPassword"].Errors.Count == 0)
                {
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control is-valid" })
                }
                else
                {
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control is-invalid" })
                }
                @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "invalid-feedback" })
            }
            else
            {
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            }
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="@Resources.SetPassword.Submit" class="btn btn-primary" />
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
