@model ARoomInterior.Models.IndexViewModel
@{
    ViewBag.Title = Resources.ManageAccount.Title;// "Управление";
}

<h2>@ViewBag.Title.</h2>

<div>
    <h4>@Resources.ManageAccount.Header</h4>
    <hr />
    @if (ViewBag.StatusMessage != "" && ViewBag.StatusMessage != null)
    {
        <div class="alert alert-dismissible alert-success">
            <button type="button" class="close" data-dismiss="alert">&times;</button>
            @ViewBag.StatusMessage
        </div>
    }
    @using (Html.BeginForm("Index", "Manage", new { }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()

        if (ViewData.ModelState.Keys.Contains(""))
        {
            <div class="alert alert-dismissible alert-primary">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                @Html.ValidationSummary(true, "")
            </div>
        }
        <div class="form-group has-success has-danger">
            @Html.LabelFor(model => model.Name, new { @class = "form-control-label", style = "margin-left:20px" }):
            <div class="col-md-10">
                @if (ViewData.ModelState.Keys.Contains("Name"))
                {
                    if (ViewData.ModelState["Name"].Errors.Count == 0)
                    {
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control is-valid" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control is-invalid" })
                    }
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "invalid-feedback" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                }
            </div>
        </div>
        <div class="form-group">
            @Html.HiddenFor(m => m.Email)
            @Html.LabelFor(model => model.Email, new { @class = "form-control-label", style = "margin-left:20px" }):
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", disabled = "" })
            </div>
        </div>
        <div class="form-group">
            <label class="form-control-label" style="margin-left:20px;">@Resources.ManageAccount.Password:</label>
            <div class="col-md-10">
                @if (Model.HasPassword)
                {
                    @Html.ActionLink(@Resources.ManageAccount.ChangePassword, "ChangePassword", null, new { @class = "btn btn-outline-primary btn-text-left form-control", style = "max-width:700px" })
                }
                else
                {
                    @Html.ActionLink(@Resources.ManageAccount.CreatePassword, "SetPassword", null, new { @class = "btn btn-outline-primary btn-text-left form-control", style = "max-width:700px" })
                }
            </div>
        </div>
        <div class="form-group has-success has-danger">
            @Html.LabelFor(model => model.Speciallization, new { @class = "form-control-label", style = "margin-left:20px" }):
            <div class="col-md-10">
                @if (ViewData.ModelState.Keys.Contains("Speciallization"))
                {
                    if (ViewData.ModelState["Speciallization"].Errors.Count == 0)
                    {
                        @Html.TextAreaFor(m => m.Speciallization, new { @class = "form-control is-valid", style = "min-height:100px" })
                    }
                    else
                    {
                        @Html.TextAreaFor(m => m.Speciallization, new { @class = "form-control is-invalid", style = "min-height:100px" })
                    }
                    @Html.ValidationMessageFor(m => m.Speciallization, "", new { @class = "invalid-feedback" })
                }
                else
                {
                    @Html.TextAreaFor(m => m.Speciallization, new { @class = "form-control", style = "min-height:100px" })
                }
            </div>
        </div>
        <div class="form-group has-success has-danger">
            @Html.LabelFor(model => model.Info, new { @class = "form-control-label", style = "margin-left:20px" }):
            <div class="col-md-10">
                @if (ViewData.ModelState.Keys.Contains("Info"))
                {
                    if (ViewData.ModelState["Info"].Errors.Count == 0)
                    {
                        @Html.TextAreaFor(m => m.Info, new { @class = "form-control is-valid", style = "min-height:150px" })
                    }
                    else
                    {
                        @Html.TextAreaFor(m => m.Info, new { @class = "form-control is-invalid", style = "min-height:150px" })
                    }
                    @Html.ValidationMessageFor(m => m.Info, "", new { @class = "invalid-feedback" })
                }
                else
                {
                    @Html.TextAreaFor(m => m.Info, new { @class = "form-control", style = "min-height:150px" })
                }
            </div>
        </div>
        <input style="width:135px; margin-left:15px; font-size:17px" type="submit" value=@Resources.ManageAccount.Submit class="btn btn-primary" />
    }

    @*<dt>Внешние имена входа:</dt>
        <dd>
            @Model.Logins.Count [
            @Html.ActionLink("Управление", "ManageLogins") ]
        </dd>*@
    @*
        Номера телефонов можно использовать в качестве второго проверочного фактора для системы двухфакторной проверки подлинности.

         В <a href="https://go.microsoft.com/fwlink/?LinkId=403804">этой статье</a>
            можно узнать, как для этого приложения ASP.NET настроить двухфакторную проверку подлинности с использованием SMS.

         Настроив двухфакторную проверку подлинности, раскомментируйте следующий блок
    *@
    @*
        <dt>Номер телефона:</dt>
        <dd>
            @(Model.PhoneNumber ?? "None")
            @if (Model.PhoneNumber != null)
            {
                <text>[&nbsp;&nbsp;@Html.ActionLink("Change", "AddPhoneNumber")&nbsp;&nbsp;]</text>
                using (Html.BeginForm("RemovePhoneNumber", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <text>[<input type="submit" value="Удалить" class="btn-link" />]</text>
                }
            }
            else
            {
                <text>[&nbsp;&nbsp;@Html.ActionLink("Add", "AddPhoneNumber")&nbsp;&nbsp;]</text>
            }
        </dd>
    *@
    @*<dt>Двухфакторная проверка подлинности:</dt>
        <dd>
            <p>
                Поставщики двухфакторной проверки подлинности не настроены. В <a href="https://go.microsoft.com/fwlink/?LinkId=403804">этой статье</a>
                можно узнать, как настроить двухфакторную проверку подлинности для этого приложения ASP.NET.
            </p>*@
    @*@if (Model.TwoFactor)
        {
            using (Html.BeginForm("DisableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <text>Включено
                <input type="submit" value="Отключить" class="btn btn-link" />
                </text>
            }
        }
        else
        {
            using (Html.BeginForm("EnableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <text>Отключено
                <input type="submit" value="Включить" class="btn btn-link" />
                </text>
            }
        }*@
    @*</dd>*@
</div>
<style>
    .btn.btn-text-left {
        text-align: left
    }
</style>