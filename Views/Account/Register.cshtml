@using ARoomInterior.Models
@model ARoomInterior.Models.RegisterViewModel
@{
    ViewBag.Title = Resources.Register.Title;
}

<h2>@ViewBag.Title.</h2>

<div class="row">
    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal col-md-6", role = "form" }))
    {
        @Html.AntiForgeryToken()
        <h4>@Resources.Register.Header</h4>
        <hr />
        if (ViewData.ModelState.Keys.Contains(""))
        {
            <div class="alert alert-dismissible alert-primary">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                @Html.ValidationSummary(true, "")
            </div>
        }
        <div class="row">
            <div class="form-group has-success has-danger col-md-8">
                @Html.LabelFor(m => m.Email, new { @class = "form-control-label", style = "margin-left:10px" })
                @if (ViewData.ModelState.Keys.Contains("Email"))
                {
                    if (ViewData.ModelState["Email"].Errors.Count == 0)
                    {
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control is-valid" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control is-invalid" })
                    }
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "invalid-feedback" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                }
            </div>
            <div class="form-group has-success has-danger col-md-4">
                @Html.LabelFor(m => m.Name, new { @class = "form-control-label", style = "margin-left:10px" })
                @if (ViewData.ModelState.Keys.Contains("Name"))
                {
                    if (ViewData.ModelState["Name"].Errors.Count == 0)
                    {
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control is-valid" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control is-invalid" })
                    }
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "invalid-feedback" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                }
            </div>
        </div>
        <div class="row">
            <div class="form-group has-success has-danger col-md-6">
                @Html.LabelFor(m => m.Password, new { @class = "form-control-label", style = "margin-left:10px" })
                @if (ViewData.ModelState.Keys.Contains("Password"))
                {
                    if (ViewData.ModelState["Password"].Errors.Count == 0)
                    {
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control is-valid" })
                    }
                    else
                    {
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control is-invalid" })
                    }
                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "invalid-feedback" })
                }
                else
                {
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                }
            </div>
            <div class="form-group has-success has-danger col-md-6">
                @Html.LabelFor(m => m.ConfirmPassword, new { @class = "form-control-label", style = "margin-left:10px" })
                @if (ViewData.ModelState.Keys.Contains("ConfirmPassword"))
                {
                    if (ViewData.ModelState["ConfirmPassword"].Errors.Count == 0)
                    {
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control is-valid" })
                    }
                    else
                    {
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control is-invalid" })
                    }
                    @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "invalid-feedback" })
                }
                else
                {
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                }
            </div>
        </div>
        <div class="form-group has-success has-danger">
            @Html.LabelFor(m => m.Speciallization, new { @class = "form-control-label", style = "margin-left:10px" })
            @if (ViewData.ModelState.Keys.Contains("Speciallization"))
            {
                if (ViewData.ModelState["Speciallization"].Errors.Count == 0)
                {
                    @Html.TextAreaFor(m => m.Speciallization, new { @class = "form-control is-valid col-md-12", style = "min-height:100px" })
                }
                else
                {
                    @Html.TextAreaFor(m => m.Speciallization, new { @class = "form-control is-invalid col-md-12", style = "min-height:100px" })
                }
                @Html.ValidationMessageFor(m => m.Speciallization, "", new { @class = "invalid-feedback" })
            }
            else
            {
                @Html.TextAreaFor(m => m.Speciallization, new { @class = "form-control col-md-12", style = "min-height:100px" })
            }
        </div>
        <div class="form-group has-success has-danger">
            @Html.LabelFor(m => m.Info, new { @class = "form-control-label", style = "margin-left:10px" })
            @if (ViewData.ModelState.Keys.Contains("Info"))
            {
                if (ViewData.ModelState["Info"].Errors.Count == 0)
                {
                    @Html.TextAreaFor(m => m.Info, new { @class = "form-control is-valid col-md-12", style = "min-height:150px" })
                }
                else
                {
                    @Html.TextAreaFor(m => m.Info, new { @class = "form-control is-invalid col-md-12", style = "min-height:150px" })
                }
                @Html.ValidationMessageFor(m => m.Info, "", new { @class = "invalid-feedback" })
            }
            else
            {
                @Html.TextAreaFor(m => m.Info, new { @class = "form-control col-md-12", style = "min-height:150px" })
            }
        </div>
        <div class="form-group row" style="margin-left:0px">
                <input type="submit" class="btn btn-primary"style="width:135px; font-size:17px" value=@Resources.Register.Submit />
                @Html.ActionLink(Resources.Register.Login, "Login", null, new { style = "margin-left:15px; margin-top:7px" })
        </div>
    }
    <div class="col-md-6">
        <section id="socialLoginForm">
            @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
        </section>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
